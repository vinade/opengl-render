#version 460 core

#define MAX_LIGHTS 4
#define GAMMA 2.0

struct Material
{
    vec4 diffuse_color;
    vec4 ambient_color;
    vec4 specular_color;
    vec4 emission_color;
    float shininess;
    float shininess_strength;

    int diffuse_texture_flag;
    int normal_texture_flag;
};

struct LightSource
{
    float ambient;
    float strength;
    int type;
    vec3 position;
    vec4 color;
};

struct Textures
{
    samplerCube skybox;
    sampler2D diffuse;
    sampler2D normal;
};

in VS_OUT {
    vec2 tex_coord;
    vec3 frag_pos;
    vec3 normal;
    mat3 TBN;
} vs;

out vec4 color;

uniform vec4 u_Color;
uniform vec3 u_Camera;
uniform LightSource u_Lights[MAX_LIGHTS];
uniform Material u_Material;
uniform Textures u_Textures;

vec3 calc_normal(){
    vec3 normal_vector = vs.normal;
    if (u_Material.normal_texture_flag == 1){
        normal_vector = texture(u_Textures.normal, vs.tex_coord).rgb;
        normal_vector = vs.TBN * (normal_vector * 2.0 - 1.0);
    }
    normal_vector = normalize(normal_vector);
    return normal_vector;
}


vec3 calc_phong(int i, vec3 normal_vector){

    vec3 l_color = vec3(u_Lights[i].color.r, u_Lights[i].color.g, u_Lights[i].color.b) * u_Lights[i].color.a;
    vec3 ambient =  l_color * ( u_Lights[i].ambient * u_Material.ambient_color.xyz );
    vec3 lightDir = normalize(u_Lights[i].position - vs.frag_pos);
    float diff = max(dot(normal_vector, lightDir), 0.0);
    vec3 diffuse = l_color * (diff * u_Material.diffuse_color.rgb);

    vec3 viewDir = normalize(u_Camera - vs.frag_pos);
    vec3 reflectDir = reflect(-lightDir, normal_vector);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), u_Material.shininess);
    vec3 specular = l_color * ( spec * u_Material.specular_color.rgb );
    specular = u_Material.shininess_strength * specular;

    return ambient + diffuse + specular;
}

vec3 calc_reflection(vec3 normal_vector){
    float reflection_factor = 0.0;
    vec3 direction = normalize(vs.frag_pos - u_Camera);
    vec3 reflection = reflect(direction, normal_vector);
    return texture(u_Textures.skybox, reflection).rgb * reflection_factor;
}

vec3 calc_refraction(vec3 normal_vector){
    float refraction_factor = 0.0;
    float refraction_ratio = 1.0 / 1.52;
    vec3 direction = normalize(vs.frag_pos - u_Camera);
    vec3 refraction = refract(direction, normal_vector, refraction_ratio);
    return texture(u_Textures.skybox, refraction).rgb * refraction_factor;
}

vec4 gamma_correction(vec4 fragment){
    return vec4(pow(fragment.rgb, vec3(1.0/GAMMA)), fragment.a);
}

void main(){
    float diffuse_factor = 1.0;
    vec4 colorTex = texture(u_Textures.diffuse, vs.tex_coord) * diffuse_factor;
    vec3 phong_color = vec3(0.0, 0.0, 0.0);

    vec3 normal_vector = calc_normal();

    for (int i = 0; i < MAX_LIGHTS; i++){
        phong_color = phong_color + calc_phong(i, normal_vector);
    }

    vec3 reflection_refraction = calc_reflection(normal_vector) + calc_refraction(normal_vector);

    colorTex = gamma_correction(colorTex);
    // color = vec4(phong_color, 1.0) * colorTex + vec4(reflection_refraction, 1.0); // original
    color = (vec4(phong_color, 1.0) * colorTex + vec4(reflection_refraction, 1.0) + colorTex) / 3.0; // mÃ©dia com albedo

}
