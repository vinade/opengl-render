#version 460 core

#define MAX_LIGHTS 4
#define GAMMA 1.4
#define PI 3.14159265

struct Material
{
    vec4 color;
    float metallic;
    float roughness;
    float reflection;

    int diffuse_texture_flag;
    int normal_texture_flag;
    int metallic_texture_flag;
    int roughness_texture_flag;
    int ambient_occlusion_texture_flag;
    int reflection_texture_flag;
};

struct LightSource
{
    float ambient;
    float strength;
    int type;
    vec3 position;
    vec4 color;
};

struct Textures
{
    samplerCube skybox;
    sampler2D diffuse;
    sampler2D normal;
    sampler2D metallic;
    sampler2D roughness;
    sampler2D ambient_occlusion;
    sampler2D reflection;
};

in VS_OUT {
    vec2 tex_coord;
    vec3 frag_pos;
    vec3 normal;
    mat3 TBN;
} vs;

out vec4 color;

uniform vec4 u_Color;
uniform vec3 u_Camera;
uniform LightSource u_Lights[MAX_LIGHTS];
uniform Material u_Material;
uniform Textures u_Textures;

float get_metallic(){
    float metallic = u_Material.metallic;
    if (u_Material.metallic_texture_flag == 1){
        metallic = texture(u_Textures.metallic, vs.tex_coord).r;
    }

    return metallic;
}

float get_roughness(){
    float roughness = u_Material.roughness;
    if (u_Material.roughness_texture_flag == 1){
        roughness = texture(u_Textures.roughness, vs.tex_coord).r;
    }

    return roughness;
}

vec3 get_albedo(){
    vec3 albedo = u_Material.color.rgb;
    if (u_Material.diffuse_texture_flag == 1){
        albedo = texture(u_Textures.diffuse, vs.tex_coord).rgb;
    }

    albedo = pow(albedo, vec3(2.2));
    return albedo;
}

float get_ambient_occlusion(){
    float ao = 1.0;
    if (u_Material.ambient_occlusion_texture_flag == 1){
        ao = texture(u_Textures.ambient_occlusion, vs.tex_coord).r;
    }

    return ao;
}

float get_reflection(){
    float reflection = u_Material.reflection;
    if (u_Material.reflection_texture_flag == 1){
        reflection = texture(u_Textures.reflection, vs.tex_coord).r;
    }

    return reflection;
}

vec3 get_normal(){
    vec3 normal_vector = vs.normal;
    if (u_Material.normal_texture_flag == 1){
        normal_vector = texture(u_Textures.normal, vs.tex_coord).rgb;
        normal_vector = vs.TBN * (normal_vector * 2.0 - 1.0);
    }

    normal_vector = normalize(normal_vector);
    return normal_vector;
}

vec3 calc_reflection(vec3 normal_vector, float reflection_factor){
    vec3 direction = normalize(vs.frag_pos - u_Camera);
    vec3 reflection = reflect(direction, normal_vector);
    return texture(u_Textures.skybox, reflection).rgb * reflection_factor;
}

vec3 calc_refraction(vec3 normal_vector){
    float refraction_factor = 0.0;
    float refraction_ratio = 1.0 / 1.52;
    vec3 direction = normalize(vs.frag_pos - u_Camera);
    vec3 refraction = refract(direction, normal_vector, refraction_ratio);
    return texture(u_Textures.skybox, refraction).rgb * refraction_factor;
}

vec3 gamma_correction(vec3 fragment){
    return pow(fragment.rgb, vec3(1.0/GAMMA));
}

float GGX_Distribution(vec3 n, vec3 h, float alpha)
{
    float NoH = dot(n, h);

    if (NoH <= 0.0){
        return 0.0;
    }

    float NoH2 = NoH * NoH;
    float den = NoH2 * alpha + (1 - NoH2);
    return alpha / ( PI * den * den );
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;
    float num   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return num / denom;
}

float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2  = GeometrySchlickGGX(NdotV, roughness);
    float ggx1  = GeometrySchlickGGX(NdotL, roughness);
	
    return ggx1 * ggx2;
}

vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    // return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 2.0);
} 

float calculateAttenuation(LightSource l) {
	float distance = length(l.position - vs.frag_pos);
	// return 1.0 / (
	// 				lamp.kc +  // perda contante
	// 				lamp.kl * distance +   // perda linear
	// 				lamp.kq * (distance * distance)   // perda quadratica
	// 		);

    return 0.9;
}

void main(){
    vec3 Lo = vec3(0.0);
    float reflection = get_reflection();
    vec3 albedo = get_albedo();
    float metallic = get_metallic();
    float roughness = get_roughness();
    float ao = get_ambient_occlusion();
    vec3 N = get_normal();
    vec3 V = normalize(u_Camera - vs.frag_pos);
    vec3 F0 = u_Lights[0].color.rgb * u_Lights[0].ambient;

    // repensar a influência do reflexo na cor
    // talvez pensar em níveis de saturacão do reflexo
    albedo = albedo * (1.0 - reflection) + calc_reflection(N, reflection);

    F0 = mix(F0, albedo, metallic);


    for (int i = 0; i < MAX_LIGHTS; i++){

        vec3 L = normalize(u_Lights[i].position - vs.frag_pos);
        vec3 H = normalize(V + L);

        float cosTheta = max(dot(N, L), 0.0);
        float attenuation = calculateAttenuation(u_Lights[i]);
        vec3 radiance = u_Lights[i].color.xyz * attenuation * cosTheta;

        float D = GGX_Distribution(N, H, roughness * roughness);
        float G = GeometrySmith(V, N, H, roughness);
        vec3 F = fresnelSchlick(max(dot(N, V), 0.0), F0);

        vec3 numerator = D * G * F;
        float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);
        vec3 specular = numerator / max(denominator, 0.001); 

        vec3 kS = F;
        vec3 kD = vec3(1.0) - kS;
        kD *= 1.0 - metallic;

        float NdotL = max(dot(N, L), 0.0);
        Lo += (kD * albedo / PI + specular) * radiance * NdotL;

    }

    vec3 ambient = u_Lights[0].ambient * albedo * ao;
    vec3 color_value = ambient + Lo;
    color_value = gamma_correction(color_value);
    color = vec4(color_value, 1.0);
    // color = vec4(calc_reflection(N, reflection), 1.0);
}
