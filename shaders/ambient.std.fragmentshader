#version 460 core

struct LightSource
{
    float ambient;
    int type;
    vec3 position;
    vec4 color;
//        vec3 Attenuation;
//        vec3 Direction;
};

in vec2 v_texCoord;
in vec3 v_fragPos;
in vec3 v_normal;

out vec4 color;

uniform vec4 u_Color;
uniform LightSource u_Lights[1];
uniform sampler2D u_Texture;

void main(){
    vec3 l_color = vec3(u_Lights[0].color.r, u_Lights[0].color.g, u_Lights[0].color.b) * u_Lights[0].color.a;
    vec3 ambient = u_Lights[0].ambient * l_color;
    vec4 colorTex = texture(u_Texture, v_texCoord);
    vec3 norm = normalize(v_normal);
    vec3 lightDir = normalize(u_Lights[0].position - v_fragPos);  
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * l_color;
    color = vec4((ambient + diffuse), 1.0) * colorTex;
}
