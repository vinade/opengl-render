#version 460 core

#define MAX_LIGHTS 4

struct LightSource
{
    float ambient;
    float strength;
    int type;
    vec3 position;
    vec4 color;
};

in vec2 v_texCoord;
in vec3 v_fragPos;
in vec3 v_normal;

out vec4 color;

uniform vec4 u_Color;
uniform vec3 u_Camera;
uniform LightSource u_Lights[MAX_LIGHTS];
uniform sampler2D u_Texture;

vec3 calc_phong(int i){

    vec3 l_color = vec3(u_Lights[i].color.r, u_Lights[i].color.g, u_Lights[i].color.b) * u_Lights[i].color.a;
    vec3 ambient = u_Lights[i].ambient * l_color;
    vec3 norm = normalize(v_normal);
    vec3 lightDir = normalize(u_Lights[i].position - v_fragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * l_color;

    float specularStrength = 5.99;
    vec3 viewDir = normalize(u_Camera - v_fragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 128);
    vec3 specular = specularStrength * spec * l_color;

    return ambient + diffuse + specular;
}

void main(){
    vec4 colorTex = texture(u_Texture, v_texCoord);
    vec3 phong_color = vec3(0.0, 0.0, 0.0);

    for (int i = 0; i < MAX_LIGHTS; i++){
        phong_color = phong_color + calc_phong(i);
    }

    color = vec4(phong_color, 1.0) * colorTex;
}
