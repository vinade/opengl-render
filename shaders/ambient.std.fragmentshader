#version 460 core

#define MAX_LIGHTS 4
#define GAMMA 2.0

struct Material
{
    vec4 diffuse_color;
    vec4 ambient_color;
    vec4 specular_color;
    vec4 emission_color;
    float shininess;
    float shininess_strength;
};

struct LightSource
{
    float ambient;
    float strength;
    int type;
    vec3 position;
    vec4 color;
};

in vec2 v_texCoord;
in vec3 v_fragPos;
in vec3 v_normal;

out vec4 color;

uniform vec4 u_Color;
uniform vec3 u_Camera;
uniform LightSource u_Lights[MAX_LIGHTS];
uniform Material u_Material;
uniform sampler2D u_Texture;
uniform samplerCube u_Skybox;

vec3 calc_phong(int i){

    vec3 l_color = vec3(u_Lights[i].color.r, u_Lights[i].color.g, u_Lights[i].color.b) * u_Lights[i].color.a;
    vec3 ambient =  l_color * ( u_Lights[i].ambient * u_Material.ambient_color.xyz );
    vec3 norm = normalize(v_normal);
    vec3 lightDir = normalize(u_Lights[i].position - v_fragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = l_color * (diff * u_Material.diffuse_color.xyz);

    vec3 viewDir = normalize(u_Camera - v_fragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), u_Material.shininess);
    vec3 specular = l_color * ( spec * u_Material.specular_color.xyz );
    specular = u_Material.shininess_strength * specular;

    return ambient + diffuse + specular;
}

vec3 calc_reflection(){
    float reflection_factor = 0.0;
    vec3 direction = normalize(v_fragPos - u_Camera);
    vec3 reflection = reflect(direction, normalize(v_normal));
    return texture(u_Skybox, reflection).rgb * reflection_factor;
}

vec3 calc_refraction(){
    float refraction_factor = 0.0;
    float refraction_ratio = 1.0 / 1.52;
    vec3 direction = normalize(v_fragPos - u_Camera);
    vec3 refraction = refract(direction, normalize(v_normal), refraction_ratio);
    return texture(u_Skybox, refraction).rgb * refraction_factor;
}

vec4 gamma_correction(vec4 fragment){
    return vec4(pow(fragment.rgb, vec3(1.0/GAMMA)), fragment.a);
}

void main(){
    float diffuse_factor = 1.0;
    vec4 colorTex = texture(u_Texture, v_texCoord) * diffuse_factor;
    vec3 phong_color = vec3(0.0, 0.0, 0.0);

    for (int i = 0; i < MAX_LIGHTS; i++){
        phong_color = phong_color + calc_phong(i);
    }

    vec3 reflection_refraction = calc_reflection() + calc_refraction();

    colorTex = gamma_correction(colorTex);
    color = vec4(phong_color, 1.0) * colorTex + vec4(reflection_refraction, 1.0);
}
