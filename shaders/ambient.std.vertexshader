#version 460 core

layout(location = 0) in vec3 position;
layout(location = 1) in vec2 texCoord;
layout(location = 2) in vec3 normal;
layout(location = 3) in vec3 tangent;
layout(location = 4) in vec3 bitangent;

out VS_OUT {
    vec2 tex_coord;
    vec3 frag_pos;
    vec3 normal;
    mat3 TBN;
} vs;

uniform mat4 u_Model;
uniform mat4 u_View;
uniform mat4 u_Projection;


void main(){
    vec4 pos = vec4(position, 1.0);
    gl_Position = u_Projection * u_View * u_Model * pos;
    vs.frag_pos = vec3(u_Model * pos);
    vs.tex_coord = texCoord;
    vs.normal = mat3(transpose(inverse(u_Model))) * normal;

   vec3 T = normalize(vec3(u_Model * vec4(tangent,   0.0)));
   vec3 B = normalize(vec3(u_Model * vec4(bitangent, 0.0)));
   vec3 N = normalize(vec3(u_Model * vec4(normal,    0.0)));
   vs.TBN = transpose(mat3(T, B, N));

}
